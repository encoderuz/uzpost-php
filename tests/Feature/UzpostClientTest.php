<?phpuse Encoderuz\Uzpost\Exceptions\UzpostException;use Encoderuz\Uzpost\Http\UzpostClient;use GuzzleHttp\Client;use GuzzleHttp\Exception\RequestException;use GuzzleHttp\Psr7\Response;use PHPUnit\Framework\MockObject\Exception;use Psr\Http\Message\RequestInterface;const UZPOST_TOKEN = "test_api_key";function setPrivateProperty(object $object, string $property, $value): void {    $reflection = new ReflectionClass($object);    $prop = $reflection->getProperty($property);    $prop->setAccessible(true);    $prop->setValue($object, $value);}it('can send a GET request successfully', function () {    $mockHttpClient = $this->createMock(Client::class);    $mockResponse = new Response(200, [], json_encode(['status' => 'success', 'data' => ['message' => 'OK']]));    $mockHttpClient->expects($this->once())        ->method('request')        ->willReturn($mockResponse);    $uzpostClient = new UzpostClient(UZPOST_TOKEN);    setPrivateProperty($uzpostClient, 'httpClient', $mockHttpClient);    $response = $uzpostClient->send_request('GET', '/customer/orders', ['page' => 0, 'size' => 20]);    expect($response)->toMatchArray(['status' => 'success', 'data' => ['message' => 'OK']]);});it('handles API request exceptions correctly', function () {    $mockHttpClient = $this->createMock(Client::class);    $mockHttpClient->method('request')        ->willThrowException(new RequestException('API error', $this->createMock(RequestInterface::class)));    $uzpostClient = new UzpostClient(UZPOST_TOKEN);    setPrivateProperty($uzpostClient, 'httpClient', $mockHttpClient);    expect(fn() => $uzpostClient->send_request('GET', '/authenticate'))        ->toThrow(UzpostException::class);});